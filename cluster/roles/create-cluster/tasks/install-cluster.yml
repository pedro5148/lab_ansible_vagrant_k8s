- name: Removendo cluster antigo (Caso exista...) 
  command:
    kubeadm reset --force
  register: kubeadm_reset

- name: Inicializar o cluster k8s...
  command: kubeadm init
  register: kubeadm_init

- name: Criando o diretorio .kube... 
  file:
    path: ~/.kube
    state: directory

- name: Linkando o arquivo admin.conf para o ~/.kube/config 
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    state: link

- name: Configurando o pod network Weavenet
  shell: kubectl apply -f {{ default_url_weavenet }}
  register: weavenet_result 

- name: Pegando o token para adicionar os workers no cluster
  #shell: kubeadm token list | cut -d ' ' -f1  | sed -n '2p'
  shell: "{{ k8s_token_command }}"
  register: k8s_token

- name: CA Hash
  #shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  shell: "{{ k8s_ca_hash_command }}" 
  register: k8s_master_ca_hash


- name: Adicionando o token e o hash em um dummy host  
  add_host:
    name: "K8S_TOKEN_HOLDER"
    token: "{{ k8s_token.stdout }}"
    hash: "{{ k8s_master_ca_hash.stdout }}"
    ansible_connection: local

# - name: Verificar todas as variáveis de host
#   debug:
#     var: hostvars['localhost']

# - name: Verificar todas as variáveis
#   debug:
#     var: hostvars

# - name: Verificar todas as variáveis de host
#   debug:
#     var: hostvars['K8S_TOKEN_HOLDER']

# - name: Definindo os fatos para token e hash
#   set_fact:
#     K8S_TOKEN_HOLDER: "{{ k8s_token.stdout }}"
#     K8S_CA_HASH: "{{ k8s_master_ca_hash.stdout }}"
#   delegate_to: localhost

- name: Debug - Verificando o token e o hash no master
  debug:
    #msg: "[MASTER] K8S_TOKEN_HOLDER - O token é {{ K8S_TOKEN_HOLDER }}, O hash é {{ K8S_CA_HASH }}"
    msg: "[MASTER] K8S_TOKEN_HOLDER - O token é {{ hostvars['K8S_TOKEN_HOLDER'].token }}, O hash é {{ hostvars['K8S_TOKEN_HOLDER'].hash }}"